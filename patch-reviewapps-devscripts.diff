diff --git a/package.json b/package.json
index 13a2c8e..6f7ce21 100644
--- a/package.json
+++ b/package.json
@@ -6,6 +6,9 @@
   "scripts": {
     "dev": "node ./scripts/doctor-env.mjs && node ./server/server-pro.cjs",
     "dev:noguard": "DISABLE_ENV_GUARD=1 node ./scripts/doctor-env.mjs || true; node ./server/server-pro.cjs",
+    "dev:up": "bash ./scripts/dev-up.sh",
+    "dev:down": "bash ./scripts/dev-down.sh",
+    "dev:repair": "bash ./scripts/dev-repair.sh",
     "lint": "eslint .",
     "typecheck": "tsc -p . --noEmit",
     "build": "tsc -p . --noEmit",
@@ -27,6 +30,9 @@
     "prisma:migrate:dev": "pnpm dlx prisma migrate dev",
     "start:prod": "node ./scripts/doctor-env.mjs && pnpm run contracts:build && pnpm run webapp:build && pnpm run prisma:migrate && node ./server/server-pro.cjs",
     "smoke:e2e": "node ./scripts/smoke-e2e.mjs",
+    "review:up": "PR_NUMBER=${PR_NUMBER:-local} API_PORT=${API_PORT:-3030} WEB_PORT=${WEB_PORT:-5173} docker compose -f docker-compose.review.yml --profile review up -d --pull always",
+    "review:down": "PR_NUMBER=${PR_NUMBER:-local} docker compose -f docker-compose.review.yml --profile review down -v",
+    "review:logs": "PR_NUMBER=${PR_NUMBER:-local} docker compose -f docker-compose.review.yml --profile review logs -f",
     "test:sequence": "node ./scripts/test-sequence.mjs",
     "otel:status": "node -e \"try{require('./server/otel.cjs').status()}catch(e){console.log('otel: disabled')}\"",
     "dev:up": "node ./scripts/doctor-env.mjs && docker compose up -d db && corepack enable && corepack prepare pnpm@latest --activate && pnpm install --frozen-lockfile && pnpm --dir webapp install --frozen-lockfile && pnpm run contracts:build && pnpm run prisma:migrate && pnpm run dev"
diff --git a/docker-compose.review.yml b/docker-compose.review.yml
new file mode 100644
index 0000000..5de9df8
--- /dev/null
+++ b/docker-compose.review.yml
@@ -0,0 +1,90 @@
+# Review Apps por PR (compose profiles)
+# Uso:
+#   PR_NUMBER=123 API_PORT=33030 WEB_PORT=35173 pnpm run review:up
+#   PR_NUMBER=123 pnpm run review:down
+name: prontuariodigital
+services:
+  db:
+    image: postgres:16-alpine
+    container_name: prontuario-db-review-${PR_NUMBER:-local}
+    profiles: ["review"]
+    environment:
+      POSTGRES_PASSWORD: postgres
+      POSTGRES_USER: postgres
+      POSTGRES_DB: prontuario_digital
+    ports:
+      - "${DB_PORT:-5432}:5432"
+    healthcheck:
+      test: ["CMD-SHELL","pg_isready -U postgres -d prontuario_digital"]
+      interval: 3s
+      timeout: 3s
+      retries: 50
+    volumes:
+      - review_postgres_data_${PR_NUMBER:-local}:/var/lib/postgresql/data
+
+  api:
+    image: node:22-alpine
+    container_name: prontuario-api-review-${PR_NUMBER:-local}
+    profiles: ["review"]
+    working_dir: /app
+    environment:
+      NODE_ENV: production
+      PORT: "3030"
+      HOST: "0.0.0.0"
+      DATABASE_URL: "postgresql://postgres:postgres@db:5432/prontuario_digital"
+    command: >
+      sh -lc "
+        corepack enable &&
+        corepack prepare pnpm@latest --activate &&
+        pnpm i --frozen-lockfile &&
+        pnpm run prisma:generate &&
+        node ./server/server-pro.cjs
+      "
+    ports:
+      - "${API_PORT:-3030}:3030"
+    depends_on:
+      db:
+        condition: service_healthy
+    volumes:
+      - ./:/app:ro
+
+  web:
+    image: node:22-alpine
+    container_name: prontuario-web-review-${PR_NUMBER:-local}
+    profiles: ["review"]
+    working_dir: /app
+    environment:
+      NODE_ENV: production
+    command: >
+      sh -lc "
+        corepack enable &&
+        corepack prepare pnpm@latest --activate &&
+        pnpm --dir webapp i --frozen-lockfile &&
+        pnpm --dir webapp run build &&
+        pnpm --dir webapp run preview -- --host 0.0.0.0 --port ${WEB_PORT:-5173}
+      "
+    ports:
+      - "${WEB_PORT:-5173}:5173"
+    depends_on:
+      api:
+        condition: service_started
+    volumes:
+      - ./:/app:ro
+
+volumes:
+  review_postgres_data_${PR_NUMBER:-local}:
diff --git a/scripts/dev-up.sh b/scripts/dev-up.sh
new file mode 100755
index 0000000..a3b1e9c
--- /dev/null
+++ b/scripts/dev-up.sh
@@ -0,0 +1,175 @@
+#!/usr/bin/env bash
+set -Eeuo pipefail
+
+here="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
+cd "$here"
+
+log() { printf "\033[1;32m[dev:up]\033[0m %s\n" "$*"; }
+warn() { printf "\033[1;33m[dev:up]\033[0m %s\n" "$*"; }
+err() { printf "\033[1;31m[dev:up]\033[0m %s\n" "$*"; }
+
+# Aviso sobre NTFS/OneDrive
+case "$PWD" in
+  /mnt/c/*) warn "Rodando sob /mnt/c (NTFS/OneDrive). Pode causar lentidão/bugs. Ideal: mover o repo para WSL (ext4)." ;;
+esac
+
+# Deps Linux (best-effort, sem travar)
+if command -v apt-get >/dev/null 2>&1; then
+  if [ "$(id -u)" = "0" ]; then
+    log "Instalando deps Linux (root)..."
+    apt-get update -y >/dev/null 2>&1 || true
+    apt-get install -y postgresql-client curl jq netcat-openbsd >/dev/null 2>&1 || true
+  else
+    log "Tentando deps Linux via sudo (best-effort)..."
+    sudo -n apt-get update -y >/dev/null 2>&1 || true
+    sudo -n apt-get install -y postgresql-client curl jq netcat-openbsd >/dev/null 2>&1 || true
+  fi
+fi
+
+# PNPM approve-builds (Prisma/esbuild) - best-effort
+if pnpm --help 2>/dev/null | grep -q approve-builds; then
+  pnpm approve-builds @prisma/client @prisma/engines prisma || true
+  pnpm --dir webapp approve-builds esbuild || true
+fi
+
+log "Instalando dependências (root e webapp)..."
+pnpm i --frozen-lockfile || pnpm i
+pnpm --dir webapp i --frozen-lockfile || pnpm --dir webapp i
+
+# Banco (Docker) + health
+db_svc="db"
+db_host="${DB_HOST:-127.0.0.1}"
+db_port="${DB_PORT:-5432}"
+log "Subindo Postgres via Docker Compose..."
+docker rm -f prontuario-db 2>/dev/null || true
+docker compose up -d "$db_svc"
+
+log "Aguardando Postgres em ${db_host}:${db_port}..."
+for i in {1..60}; do
+  if nc -z "$db_host" "$db_port" 2>/dev/null; then break; fi
+  sleep 0.5
+done
+nc -z "$db_host" "$db_port" || { err "Postgres não respondeu em ${db_host}:${db_port}"; exit 1; }
+
+log "Aplicando migrations Prisma..."
+pnpm run prisma:migrate || true
+pnpm run prisma:generate || true
+
+# Mata processos presos nas portas
+kill_port() {
+  local p="$1"
+  ss -ltnp 2>/dev/null | grep -E ":${p} " | sed -E 's/.*pid=([0-9]+),.*/\1/' | xargs -r kill -9 || true
+}
+kill_port 3030
+kill_port 5173
+
+log "Subindo API (server)..."
+nohup node ./server/server-pro.cjs > server-dev.log 2>&1 &
+api_pid=$!
+
+log "Aguardando API em :3030..."
+for i in {1..80}; do
+  if ss -ltnp 2>/dev/null | grep -q ":3030 "; then break; fi
+  sleep 0.25
+done
+ss -ltnp 2>/dev/null | grep -q ":3030 " || { err "API não subiu (porta 3030). Veja server-dev.log"; exit 1; }
+
+log "Subindo WEB (Vite dev)..."
+nohup pnpm --dir webapp run dev > webapp-dev.log 2>&1 &
+web_pid=$!
+
+log "Aguardando WEB em :5173..."
+for i in {1..80}; do
+  if ss -ltnp 2>/dev/null | grep -q ":5173 "; then break; fi
+  sleep 0.25
+done
+ss -ltnp 2>/dev/null | grep -q ":5173 " || { err "WEB não subiu (porta 5173). Veja webapp-dev.log"; exit 1; }
+
+echo "$api_pid" > .server.pid
+echo "$web_pid" > .web.pid
+
+log "DEV READY → API: http://127.0.0.1:3030  |  WEB: http://127.0.0.1:5173"
+log "Logs: tail -f server-dev.log  |  tail -f webapp-dev.log"
diff --git a/scripts/dev-down.sh b/scripts/dev-down.sh
new file mode 100755
index 0000000..6c2b7de
--- /dev/null
+++ b/scripts/dev-down.sh
@@ -0,0 +1,67 @@
+#!/usr/bin/env bash
+set -Eeuo pipefail
+here="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
+cd "$here"
+log() { printf "\033[1;35m[dev:down]\033[0m %s\n" "$*"; }
+
+# Mata por PID files
+for f in .server.pid .web.pid; do
+  if [ -f "$f" ]; then
+    pid="$(cat "$f" || true)"
+    if [ -n "${pid:-}" ]; then kill "$pid" 2>/dev/null || true; fi
+    rm -f "$f"
+  fi
+done
+
+# Mata por portas (fallback)
+kill_port() {
+  local p="$1"
+  ss -ltnp 2>/dev/null | grep -E ":${p} " | sed -E 's/.*pid=([0-9]+),.*/\1/' | xargs -r kill -9 || true
+}
+kill_port 3030
+kill_port 5173
+
+# Para o DB (mantém volume)
+log "Parando Postgres (docker compose stop db)..."
+docker compose stop db 2>/dev/null || true
+
+log "OK."
diff --git a/scripts/dev-repair.sh b/scripts/dev-repair.sh
new file mode 100755
index 0000000..9b3a9b4
--- /dev/null
+++ b/scripts/dev-repair.sh
@@ -0,0 +1,110 @@
+#!/usr/bin/env bash
+set -Eeuo pipefail
+here="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
+cd "$here"
+log() { printf "\033[1;36m[dev:repair]\033[0m %s\n" "$*"; }
+err() { printf "\033[1;31m[dev:repair]\033[0m %s\n" "$*"; }
+
+log "Encerrando dev atual..."
+bash ./scripts/dev-down.sh || true
+
+log "Limpando caches (node_modules, store PNPM, dist/)..."
+rm -rf node_modules webapp/node_modules || true
+pnpm store prune || true
+find . -type d \( -name dist -o -name .next -o -name .turbo \) -prune -exec rm -rf {} + || true
+
+log "Reinstalando dependências..."
+pnpm i || true
+pnpm --dir webapp i || true
+
+log "Regerando Prisma client..."
+pnpm run prisma:generate || true
+
+log "Ajustando permissões básicas..."
+git config core.filemode false || true
+find scripts -type f -name '*.sh' -exec chmod +x {} \; || true
+
+log "Revalidando health da API..."
+nohup node ./server/server-pro.cjs > server-repair.log 2>&1 &
+apid=$!
+for i in {1..80}; do
+  if ss -ltnp 2>/dev/null | grep -q ":3030 "; then break; fi
+  sleep 0.25
+done
+if ss -ltnp 2>/dev/null | grep -q ":3030 "; then
+  curl -fsS http://127.0.0.1:3030/api/v1/health >/dev/null 2>&1 || curl -fsS http://127.0.0.1:3030/api/health >/dev/null 2>&1 || true
+  kill "$apid" 2>/dev/null || true
+  log "Health OK na porta 3030."
+else
+  err "API não subiu na porta 3030. Veja server-repair.log"
+  exit 1
+fi
+
+log "Repair concluído."