name: CI (pnpm ‚Ä¢ lint ‚Ä¢ typecheck ‚Ä¢ build)

on:
  push:
    branches: [main]
    paths-ignore:
      - "**/*.md"
      - "docs/**"
      - "**/.vscode/**"
      - "exports/**"
      - "data/**"
      - "certs/**"
      - "**/*.png"
      - "**/*.jpg"
      - "**/*.jpeg"
      - "**/*.pdf"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**/*.md"
      - "docs/**"
      - "**/.vscode/**"
      - "exports/**"
      - "data/**"
      - "certs/**"
      - "**/*.png"
      - "**/*.jpg"
      - "**/*.jpeg"
      - "**/*.pdf"
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CI: "true"
  NODE_ENV: development
  npm_config_production: "false"
  npm_config_audit: "false"
  npm_config_fund: "false"

jobs:
  hygiene:
    name: üîç Higiene do repo
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Inspecionar artefatos versionados
        run: |
          if git ls-files | grep -E '(^|/)node_modules($|/)|(^|/)(dist|build|\.next|coverage)($|/)' >/dev/null; then
            echo "::warning::Artefatos (node_modules/dist/build/.next/coverage) est√£o rastreados no git. Abra PR espec√≠fico de limpeza para remov√™-los do versionamento."
          else
            echo "OK: Sem artefatos cr√≠ticos versionados."
          fi

  lint_typecheck:
    name: ‚úÖ Lint & Typecheck (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    needs: hygiene
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        node: [20.x, 22.x]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: |
            pnpm-lock.yaml
            webapp/pnpm-lock.yaml

      - name: Enable Corepack (PNPM)
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Install deps (root)
        if: hashFiles('pnpm-lock.yaml') != ''
        run: pnpm install --frozen-lockfile

      - name: Prisma generate (root)
        if: hashFiles('pnpm-lock.yaml') != '' && hashFiles('prisma/schema.prisma') != ''
        run: pnpm dlx prisma generate

      - name: Lint (root)
        if: hashFiles('package.json') != ''
        run: pnpm run -s lint || pnpm dlx eslint . --max-warnings=0

      - name: Typecheck (root)
        if: hashFiles('tsconfig.json') != ''
        run: pnpm run -s typecheck || pnpm dlx tsc -p . --noEmit

      - name: Install deps (webapp)
        if: hashFiles('webapp/pnpm-lock.yaml') != ''
        run: pnpm --dir webapp install --frozen-lockfile

      - name: Lint (webapp)
        if: hashFiles('webapp/package.json') != ''
        run: pnpm --dir webapp run -s lint || pnpm --dir webapp dlx eslint . --max-warnings=0

      - name: Typecheck (webapp)
        if: hashFiles('webapp/tsconfig.json') != ''
        run: pnpm --dir webapp run -s typecheck || pnpm --dir webapp dlx tsc -p . --noEmit

  build:
    name: üèóÔ∏è Build (Node 20, pnpm)
    runs-on: ubuntu-latest
    needs: lint_typecheck
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: pnpm
          cache-dependency-path: |
            pnpm-lock.yaml
            webapp/pnpm-lock.yaml

      - name: Enable Corepack (PNPM)
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Install deps (root)
        if: hashFiles('pnpm-lock.yaml') != ''
        run: pnpm install --frozen-lockfile

      - name: Build root
        if: hashFiles('package.json') != ''
        run: |
          pnpm run -s build || pnpm dlx tsc -p . --noEmit

      - name: Install deps (webapp)
        if: hashFiles('webapp/pnpm-lock.yaml') != ''
        run: pnpm --dir webapp install --frozen-lockfile

      - name: Build webapp
        if: hashFiles('webapp/package.json') != ''
        run: |
          pnpm --dir webapp run -s build || pnpm --dir webapp dlx vite build
