powershell -NoProfile -ExecutionPolicy Bypass -Command "try { Write-Output 'Starting maintenance...' | Tee-Object -FilePath maintenance.log; foreach ($p in @(3000,5173,8080)) { try { npx kill-port $p 2>&1 } catch { Get-Process -Id (Get-NetTCPConnection -LocalPort $p -ErrorAction SilentlyContinue).OwningProcess -ErrorAction SilentlyContinue | Stop-Process -Force } }; if (!(Get-Command code -ErrorAction SilentlyContinue)) { Write-Warning 'VS Code CLI not found in PATH - GitLens features (blame, history, insights) may need manual installation' | Tee-Object -Append maintenance.log } else { code --install-extension eamodio.gitlens --force 2>&1 | Tee-Object -Append maintenance.log }; $ErrorActionPreference = 'Continue'; Remove-Item -Recurse -Force node_modules,.next,dist,build -ErrorAction SilentlyContinue; npm cache clean --force 2>&1 | Tee-Object -Append install.log; $npmInstall = npm ci 2>&1; if ($LASTEXITCODE -ne 0) { Write-Warning 'npm ci failed, trying npm install...' | Tee-Object -Append install.log; npm install --legacy-peer-deps 2>&1 | Tee-Object -Append install.log }; npm audit fix --force 2>&1 | Tee-Object -Append install.log; if (Test-Path tsconfig.json) { Write-Output 'Checking TypeScript...' | Tee-Object -Append lint.log; $tscResult = npx tsc --noEmit 2>&1; if ($LASTEXITCODE -ne 0) { Write-Warning 'TypeScript errors found - attempting fixes...' | Tee-Object -Append lint.log; npm install --save-dev typescript @types/node @types/react 2>&1 | Tee-Object -Append lint.log; npx tsc --noEmit 2>&1 | Tee-Object -Append lint.log } }; if (Test-Path .eslintrc*) { Write-Output 'Running ESLint...' | Tee-Object -Append lint.log; $eslintResult = npx eslint . --ext .js,.jsx,.ts,.tsx 2>&1; if ($LASTEXITCODE -ne 0) { Write-Warning 'ESLint errors found - attempting fixes...' | Tee-Object -Append lint.log; npx eslint . --ext .js,.jsx,.ts,.tsx --fix 2>&1 | Tee-Object -Append lint.log } }; npx prettier --write . 2>&1 | Tee-Object -Append lint.log; $testScript = if ((Get-Content package.json -Raw | ConvertFrom-Json).scripts.test) { 'test' } else { $null }; if ($testScript) { Write-Output 'Running tests...' | Tee-Object -Append test.log; $testResult = npm test 2>&1; if ($LASTEXITCODE -ne 0) { Write-Warning 'Tests failed - attempting to fix dependencies...' | Tee-Object -Append test.log; npm install --save-dev jest @types/jest ts-jest 2>&1 | Tee-Object -Append test.log; npm test -- --passWithNoTests 2>&1 | Tee-Object -Append test.log } }; Write-Output 'Building project...' | Tee-Object -Append build.log; $buildResult = npm run build 2>&1; if ($LASTEXITCODE -ne 0) { Write-Warning 'Build failed - attempting fixes...' | Tee-Object -Append build.log; npm install --save-dev @types/node @babel/core 2>&1 | Tee-Object -Append build.log; npm run build 2>&1 | Tee-Object -Append build.log }; $startScript = if ((Get-Content package.json -Raw | ConvertFrom-Json).scripts.start) { 'start' } elseif ((Get-Content package.json -Raw | ConvertFrom-Json).scripts.dev) { 'dev' }; if ($startScript) { Write-Output 'Starting development server...' | Tee-Object -Append start.log; npm run $startScript 2>&1 | Tee-Object -Append start.log } } catch { Write-Error $_.Exception.Message | Tee-Object -Append error.log; exit 1 }"
